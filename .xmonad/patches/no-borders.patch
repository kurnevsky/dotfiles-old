diff --git a/XMonad/Layout/NoBorders.hs b/XMonad/Layout/NoBorders.hs
index 71b72fe..5188b89 100644
--- a/XMonad/Layout/NoBorders.hs
+++ b/XMonad/Layout/NoBorders.hs
@@ -27,8 +27,8 @@ module XMonad.Layout.NoBorders (
                                 lessBorders,
                                 SetsAmbiguous(..),
                                 Ambiguity(..),
-                                With(..),
                                 SmartBorder, WithBorder, ConfigurableBorder,
+                                Union(..), Difference(..), Intersection(..)
                                ) where
 
 import XMonad
@@ -108,7 +108,7 @@ instance (Read p, Show p, SetsAmbiguous p) => LayoutModifier (ConfigurableBorder
     unhook (ConfigurableBorder _p s) = asks (borderWidth . config) >>= setBorders s
 
     redoLayout (ConfigurableBorder p s) _ mst wrs = do
-        ws <- withWindowSet (\wset -> return (hiddens p wset mst wrs))
+        ws <- withWindowSet (\wset -> hiddens p wset mst wrs)
         asks (borderWidth . config) >>= setBorders (s \\ ws)
         setBorders ws 0
         return (wrs, Just $ ConfigurableBorder p ws)
@@ -136,15 +136,14 @@ instance (Read p, Show p, SetsAmbiguous p) => LayoutModifier (ConfigurableBorder
 -- This indirect method is required to keep the 'Read' and 'Show' for
 -- ConfigurableBorder so that xmonad can serialize state.
 class SetsAmbiguous p where
-    hiddens :: p -> WindowSet -> Maybe (W.Stack Window) -> [(Window, Rectangle)] -> [Window]
+    pureHiddens :: p -> WindowSet -> Maybe (W.Stack Window) -> [(Window, Rectangle)] -> [Window]
+    pureHiddens _ _ _ _ = []
+    hiddens :: p -> WindowSet -> Maybe (W.Stack Window) -> [(Window, Rectangle)] -> X [Window]
+    hiddens _p wset mst = return . pureHiddens _p wset mst
 
 instance SetsAmbiguous Ambiguity where
-    hiddens amb wset mst wrs
-      | Combine Union a b <- amb = on union next a b
-      | Combine Difference a b <- amb = on (\\) next a b
-      | Combine Intersection a b <- amb = on intersect next a b
-      | otherwise = tiled ms ++ floating
-      where next p = hiddens p wset mst wrs
+    pureHiddens amb wset mst wrs = tiled ms ++ floating
+      where next p = pureHiddens p wset mst wrs
             nonzerorect (Rectangle _ _ 0 0) = False
             nonzerorect _ = True
 
@@ -174,12 +173,7 @@ instance SetsAmbiguous Ambiguity where
 -- subsequent constructors add additional cases where borders are not drawn
 -- than their predecessors. These behaviors make most sense with with multiple
 -- screens: for single screens, 'Never' or 'smartBorders' makes more sense.
-data Ambiguity = Combine With Ambiguity Ambiguity
-                             -- ^ This constructor is used to combine the
-                             -- borderless windows provided by the
-                             -- SetsAmbiguous instances from two other
-                             -- 'Ambiguity' data types.
-               | OnlyFloat   -- ^ Only remove borders on floating windows that
+data Ambiguity = OnlyFloat   -- ^ Only remove borders on floating windows that
                              -- cover the whole screen
                | Never       -- ^ Never remove borders when ambiguous:
                              -- this is the same as smartBorders
@@ -193,9 +187,23 @@ data Ambiguity = Combine With Ambiguity Ambiguity
                              -- as a statusbar to detect focus.
     deriving (Read, Show)
 
--- | Used to indicate to the 'SetsAmbiguous' instance for 'Ambiguity' how two
--- lists should be combined.
-data With = Union        -- ^ uses 'Data.List.union'
-          | Difference   -- ^ uses 'Data.List.\\'
-          | Intersection -- ^ uses 'Data.List.intersect'
-        deriving (Read, Show)
+data Union a b = Union a b
+  deriving (Read, Show)
+
+instance (SetsAmbiguous a, SetsAmbiguous b) => SetsAmbiguous (Union a b) where
+  hiddens (Union a b) wset mst wrs =
+    union <$> hiddens a wset mst wrs <*> hiddens b wset mst wrs
+
+data Difference a b = Difference a b
+  deriving (Read, Show)
+
+instance (SetsAmbiguous a, SetsAmbiguous b) => SetsAmbiguous (Difference a b) where
+  hiddens (Difference a b) wset mst wrs =
+    (\\) <$> hiddens a wset mst wrs <*> hiddens b wset mst wrs
+
+data Intersection a b = Intersection a b
+  deriving (Read, Show)
+
+instance (SetsAmbiguous a, SetsAmbiguous b) => SetsAmbiguous (Intersection a b) where
+  hiddens (Intersection a b) wset mst wrs =
+    intersect <$> hiddens a wset mst wrs <*> hiddens b wset mst wrs
